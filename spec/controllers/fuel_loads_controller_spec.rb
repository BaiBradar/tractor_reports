require 'spec_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

describe FuelLoadsController do
  require "bigdecimal"
  require "bigdecimal/util"
  
  # This should return the minimal set of attributes required to create a valid
  # FuelLoad. As you add validations to FuelLoad, be sure to
  # update the return value of this method accordingly.
  
  before(:each) do
    @user = Factory(:user)
    test_sign_in(@user)
    @tractor = Factory(:tractor)
    @tractor_driver = Factory(:tractor_driver)
  end

  def valid_attributes
    { :amount => "120".to_d, :loaded_at => "2012-02-11 11:48:00.000000", :tractor_code => @tractor.code, :tractor_driver_name => @tractor_driver.name }
  end
  
  
  describe "GET index" do
    it "assigns all fuel_loads as @fuel_loads" do
      fuel_load = @user.fuel_loads.build valid_attributes
      get :index
      assigns(:fuel_loads).should eq([fuel_load])
    end
  end

  describe "GET show_for_drivers" do
    it "assigns fuel loads for this driver as @fuel_loads" do
      fuel_load = @user.fuel_loads.build valid_attributes
      get :load_for_driver, :tractor_driver_name => @tractor_driver.name
      assigns(:fuel_loads).should eq([fuel_load])
    end
  end
  
  describe "GET show_for_tractors" do
    it "assigns fuel loads for this tractor as @fuel_loads" do
      fuel_load = @user.fuel_loads.build valid_attributes
      get :load_for_tractor, :tractor_code => @tractor.code
      assigns(:fuel_loads).should eq([fuel_load])
    end
  end

  describe "GET new" do
    it "assigns a new fuel_load as @fuel_load" do
      get :new
      assigns(:fuel_load).should be_a_new(FuelLoad)
    end
  end


  describe "POST create" do
    describe "with valid params" do
      it "creates a new FuelLoad" do
        expect {
          post :create, :fuel_load => valid_attributes
        }.to change(FuelLoad, :count).by(1)
      end

      it "assigns a newly created fuel_load as @fuel_load" do
        post :create, :fuel_load => valid_attributes
        assigns(:fuel_load).should be_a(FuelLoad)
        assigns(:fuel_load).should be_persisted
      end

      it "redirects to the created fuel_load" do
        post :create, :fuel_load => valid_attributes
        response.should redirect_to(fuel_loads_path)
      end
    end

    describe "with invalid params" do
      it "assigns a newly created but unsaved fuel_load as @fuel_load" do
        # Trigger the behavior that occurs when invalid params are submitted
        FuelLoad.any_instance.stub(:save).and_return(false)
        post :create, :fuel_load => {}
        assigns(:fuel_load).should be_a_new(FuelLoad)
      end

      it "re-renders the 'new' template" do
        # Trigger the behavior that occurs when invalid params are submitted
        FuelLoad.any_instance.stub(:save).and_return(false)
        post :create, :fuel_load => {}
        response.should render_template("new")
      end
    end
  end


  #describe "DELETE destroy" do
  #  it "destroys the requested fuel_load" do
   #   fuel_load = @user.fuel_loads.build valid_attributes
  #    expect {
   #     delete :destroy, :id => fuel_load.id.to_s
   #   }.to change(FuelLoad, :count).by(-1)
  #  end

  #it "redirects to the fuel_loads list" do
    #  fuel_load = @user.fuel_loads.build valid_attributes
     # delete :destroy, :id => fuel_load.id.to_s
    #  response.should redirect_to(fuel_loads_url)
   # end
  #end

end
